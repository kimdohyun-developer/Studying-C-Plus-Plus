#include<iostream>
 

using namespace std;

//C++에서 생성자는 객체 멤버의 초기화뿐만 아니라, 객체를 사용하기 위한 외부환경까지도 초기화하는 역활을 한다.
//따라서 객체의 수명이 끝나면 생성자의 반대 역할을 수행할 멤버함수도 필요해진다. 
//소멸자(destructor)
//객체의 수명이 끝나면 컴파일러에 의해 자동으로 호출이 되며, 사용이 끝난 객체를 정리해준다.

//C++에서 클래스 소멸자의 이름은 해당 클래스의 이름과 같으며, 이름 앞에 물결표시(tilde,~)를 붙여 생성자와 구분한다.

//생성자의 특징 
//1. 소멸자는 인수를 가지지 않습니다.
//2. 소멸자는 반환값이 없지만 void형으로 선언하지 않습니다.
//3. 객체는 여러 개의 생성자를 가질 수 있지만, 소멸자는 단 하나만 가질 수 있습니다.
//4. 소멸자는 const, volatile 또는 static으로 선언될 수는 없지만, const, volatile 또는 static으로 선언된 객체의 소멸을 위해서 호출될 수는 있습니다.

//예제

class Car
{
	public:
		Car() //생성자 
		{
			
			cout<<"차량 생성"<<endl; 
		}
		
		~Car() //소멸자  
		{
			cout<<"차량 소멸"<<endl;
		}
};


int main(void)
{
	Car c1;
	cout<<"test1"<<endl;
	Car *c2 = new Car(); //동적으로 객체생성 
	cout<<"test2"<<endl;
	
	delete c2; //동적으로 생성한 객체 소멸 
	cout<<"test3"<<endl;
	return 0;
}

//소멸자는 컴파일을 할 때 자동으로 마지막에 한번 실행되기때문에 우리가 따로 소멸자를 돌려도 마지막에 한번 더 소멸자가 실행된다. 
//동적으로 객체를 생성했으면 delete키워드를 이용해서 소멸시켜야 한다. 
