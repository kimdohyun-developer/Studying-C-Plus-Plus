#include<iostream>

using namespace std;

//디폴트 생성자(default constructor) 
//디폴트 생성자는 객체가 생성될 때 사용자가 초깃값을 명시하지 않으면, 컴파일러가 자동으로 제공하는 생성자이다.
//디폴트 생성자는 사용자로부터 인수를 전달받지않으므로, 매개변수를 가지지 않는다.
//매개변수를 가지지 않으므로 대부분의 디폴트 생성자가 0이나 NULL, 빈 문자열 등으로 초기화를 진행한다.

//디폴트 생성자의 원형 
//dummy(){}

//디폴트 생성자는 클래스에 생성자가 단하나도 정의되지 않았을 때만, 컴파일러에 의해 자동으로 제공된다.
//만약 사용자가 생성자를 단 하나라도 정의했다면, 위와 같은 객체의 선언은 오류를 발생시킬 것이다.
//따라서 위와 같이 초깃값을 명시하지 않고 객체를 생성하고 싶다면, 사용자가 직접 디폴트 생성자를 정의해야 한다. 

//디폴트 생성자의 정의
//1. 함수 오버로딩을 이용한 방법
//2.디폴트 인수를 이용한 방법

//디폴트 인수를 이용한 디폴트 생성자의 정의
//기존 생성자의 모든 인수에 디폴트 인수를 명시함으로써 디폴트 생성자를 정의할 수 있따.
//예
//Car::Car(const string& name = "그랜저", int speed ="100");
//위의 예제처럼 모든 인수에 디폴트값을 명시하면, 인수를 전달하지 않고도 객체를 생성할 수 있는 디폴트 생성자가 된다. 

//함수 오버로딩을 이용한 디폴트 생성자의 정의
//예
//Car();
//클래스는 단 하나의 디폴트 생성자만을 가질 수 있으므로, 둘중 한가지 방법으로만 디폴트 생성자를 정의해야한다.

//디폴트 생성자를 가지는 객체의 선언

//1. Car cc; //디폴트 생성자의 암시적 호출
//2. Car cc = Car(); //디폴트 생성자의 명시적 호출 
//3. Car *ptr_cc = new Car(); //디폴트 생성자의 암시적 호출-Java와 유사(포인터를 쓴다는 차이점이 존재.) 

//예제
 
class Car
{
	int engine;
	int rpm;
	int carId;
	
	public:
		void getCar(int engine, int rpm, int carId)
	    {
	    	this->engine=engine;
	    	this->rpm=rpm;
	    	this->carId=carId;
	    }
	    
	    void carInfo()
	    {
	    	cout<<"차량번호: "<<carId<<" 엔진: "<<engine<<" rpm: "<<rpm<<endl; 
		}
};

int main(void)
{
	Car c1; //디폴트 생성자의 암시적 호출 
	Car c2 = Car(); //디폴트 생성자의 명시적 호출 
	
	c1.getCar(600,3000,15601);
	c2.getCar(800,4000,18574);

	c1.carInfo();
	c2.carInfo();

	return 0;
}
