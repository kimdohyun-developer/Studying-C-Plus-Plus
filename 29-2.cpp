#include<iostream>

using namespace std;

//내부 연결을 가지는 정적변수
//유효범위를 변환단위로 가지는 변수에 static키워드를 사용하여 정의한다.
//이러한 내부 연결을 가지는 정적변수는 해당변수를 포함하고 있는 변환단위, 즉 현재파일에서만 사용할 수 있다.
//이 변수는 하나의 파일 내의 모든 블록에서 접근할 수 있고 사용할 수 있다.

//예제

static int var; //내부연결을 가지는 정적변수 

void Local(void);

int main(void)
{
	cout<<"var의 초기값: "<<var<<endl; //정적변수를 초기화하지 않으면 초기값은 0임.
	int i =5;
	int var = 10; //자동 변수 선언
	cout<<"main함수 내의 자동변수 var의 값: "<<var<<endl; //자동변수에 접근 
	
	if(i<10)
	{
		Local();
		cout<<"현재 변수var의 값: "<<var<<endl;
	} 
	
	cout<<"더이상 main함수에서는 정적변수에 접근할 수 없다."<<endl;
	return 0;
}

void Local(void)
{
	var = 20; //정적변수의 값 변경. 
	cout<<"Local함수 내의 자동 변수 var의 값: "<<var<<endl;
} 

//위의 예제에서 정적변수와 이름이 같은 자동변수가 main함수 내부에 선언되는데
//이 자동변수가 선언되기 전까지는 main함수에서도 정적변수에 접근할 수 있다.

//하지만 자동변수가 선언된 후에는 main함수에서 정적변수로 접근할 방법이 없어진다.
//왜냐하면, 블록 내에서 선언된 자동변수는 같은 이름의 정적변수를 덮어쓰기 때문이다.

//외부 연결을 가지는 정적변수
//유효범위를 변환단위로 가지는 변수를 의미한다.
//외부연결을 가지는 정적변수를 전역변수 또는 외부변수라고 부른다.

//외부변수는 해당파일 뿐만아니라 외부 파일에서도 사용할 수 있는 변수이다.
//이러한 외부변수는 해당변수를 사용하는 모든 파일에서 각각 extern키워드를 사용하여 재선언되어야 사용할 수 있다.

//예
//first.cpp
/*
 #include <iostream>

using namespace std;

 

int var = 10; // 외부 변수 정의

...
*/

//second.cpp

/*
#include <iostream>

using namespace std;

 

#include "first.cpp"

extern int var; // 외부 변수를 사용하기 위한 재선언

...
*/
//이런식으로 사용할 수 있다.

//C++에서는 여러 파일에서 외부변수가 사용될 경우, 오직한개의 파일에서만 외부변수에 대한 정의를 할 수 있따.
//이러한 원칙을 단일 정의의 원칙이라고 한다. 

 
